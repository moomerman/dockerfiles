FROM arm64v8/debian:stretch-slim

## APT

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    make \
    build-essential \
    sudo \
    mysql-server \
    git-core \
 && rm -rf /var/lib/apt/lists/*

## ERLANG

ENV OTP_VERSION="20.0"

# We'll install the build dependencies, and purge them on the last step to make
# sure our final image contains only what we've just built:
RUN set -xe \
	&& OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz" \
	&& OTP_DOWNLOAD_SHA256="548815fe08f5b661d38334ffa480e9e0614db5c505da7cb0dc260e729697f2ab" \
	&& fetchDeps=' \
		curl \
		ca-certificates' \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends $fetchDeps \
	&& curl -4fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" \
	&& echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - \
	&& runtimeDeps=' \
		libssl1.0.2 \
		libsctp1 \
	' \
	&& buildDeps=' \
		autoconf \
		gcc \
		make \
		libncurses-dev \
		libssl-dev \
		libsctp-dev \
	' \
	&& apt-get install -y --no-install-recommends $runtimeDeps \
	&& apt-get install -y --no-install-recommends $buildDeps \
	&& curl -4fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" \
	&& echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - \
	&& export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" \
	&& mkdir -vp $ERL_TOP \
	&& tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 \
	&& rm otp-src.tar.gz \
	&& ( cd $ERL_TOP \
	  && ./otp_build autoconf \
	  && ./configure \
		--without-wx --without-debugger --without-observer --without-odbc --enable-dirty-schedulers \
                --without-javac --without-jinterface --without-cosEvent --without-cosEventDomain --without-cosFileTransfer --without-cosNotification \
                --without-cosProperty --without-cosTime --without-cosTransactions --without-dialyzer --without-et --without-gs --without-ic --without-megaco --without-orber \
                --without-percept --without-typer \
                --enable-threads --enable-hipe \
	  && make -j$(nproc) \
	  && make install ) \
	&& find /usr/local -name examples | xargs rm -rf \
	&& apt-get purge -y --auto-remove $buildDeps $fetchDeps \
	&& rm -rf $ERL_TOP /var/lib/apt/lists/*

## ELIXIR

ENV ELIXIR_VERSION="v1.4.5" \
  LANG=C.UTF-8

RUN set -xe \
  && ELIXIR_DOWNLOAD_URL="https://github.com/elixir-lang/elixir/releases/download/${ELIXIR_VERSION}/Precompiled.zip" \
  && ELIXIR_DOWNLOAD_SHA256="a740e634e3c68b1477e16d75a0fd400237a46c62ceb5d04551dbc46093a03f98"\
  && buildDeps=' \
    unzip \
  ' \
  && apt-get update \
  && apt-get install -y --no-install-recommends $buildDeps \
  && curl -4fSL -o elixir-precompiled.zip $ELIXIR_DOWNLOAD_URL \
  && echo "$ELIXIR_DOWNLOAD_SHA256 elixir-precompiled.zip" | sha256sum -c - \
  && unzip -d /usr/local elixir-precompiled.zip \
  && rm elixir-precompiled.zip \
  && apt-get purge -y --auto-remove $buildDeps \
  && rm -rf /var/lib/apt/lists/*

RUN mix local.hex --force && mix local.rebar --force

## NODE

ENV NODE_VERSION=8.1.3 \
    LANG=C.UTF-8 \
    NPM_CONFIG_LOGLEVEL=info

RUN curl -4sL https://deb.nodesource.com/setup_8.x \
    | bash - && sudo apt-get install -y nodejs && rm -rf /var/lib/apt/lists/*

## YARN

RUN curl -4 -o- -L https://yarnpkg.com/install.sh | bash

CMD ["bin/bash"]
